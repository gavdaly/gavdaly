---
import { getCollection } from "astro:content";
import Layout from "@/layouts/MarkdownLayout.astro";
import formatDate from "@/utils/formatDate";
import type { CollectionEntry } from "astro:content";
import Tags from "@/components/Tags.astro";
import License from "@/components/CreativeCommons.astro";
import { SITE_URL } from "@/data/config";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

type Props = {
  post: CollectionEntry<"posts">;
};

const post = Astro.props.post;
const data = post.data;
const { title, description, publishedAt, postState, tags } = data;
const { Content } = await post.render();

const postUrl = new URL(`/posts/${post.slug}`, SITE_URL).toString();
const structuredDataJson = JSON.stringify({
  "@context": "https://schema.org",
  "@graph": [
    {
      "@type": "BlogPosting",
      headline: title,
      description,
      author: {
        "@type": "Person",
        name: "Gavin Daly",
      },
      datePublished: publishedAt.toISOString(),
      mainEntityOfPage: {
        "@type": "WebPage",
        "@id": postUrl,
      },
    },
    {
      "@type": "BreadcrumbList",
      itemListElement: [
        {
          "@type": "ListItem",
          position: 1,
          name: "Home",
          item: SITE_URL,
        },
        {
          "@type": "ListItem",
          position: 2,
          name: "Posts",
          item: new URL("/posts", SITE_URL).toString(),
        },
        {
          "@type": "ListItem",
          position: 3,
          name: title,
          item: postUrl,
        },
      ],
    },
  ],
});
export { structuredDataJson };

---
<head>
  <script is:inline type="application/ld+json">
    {structuredDataJson}
  </script>
</head>


<Layout title={title} description={description} bodyClass="post-body">
  <header slot="header" class="flex flex-col gap-6 md:gap-8">
    <div class="flex flex-col gap-4">
      {postState && (
        <span
          class="w-fit rounded-full border border-sky-900/20 bg-sky-200/70 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-sky-900 dark:border-sky-100/10 dark:bg-sky-900/30 dark:text-sky-100"
        >
          {postState}
        </span>
      )}
      <h1
        class="text-4xl font-black leading-tight tracking-tight text-sky-950 dark:text-sky-100 md:text-5xl"
      >
        {title}
      </h1>
      <p class="max-w-2xl text-lg text-sky-800 dark:text-sky-200 md:text-xl">
        {description}
      </p>
    </div>
    <div class="flex flex-wrap items-center gap-4 text-sm font-semibold uppercase tracking-wide text-sky-700 dark:text-sky-300">
      <span class="text-xs font-medium text-sky-600 dark:text-sky-400">Published</span>
      <time datetime={publishedAt.toISOString()}>
        {formatDate(publishedAt)}
      </time>
    </div>
    <Tags names={tags} />
  </header>

  <Content />

  <footer
    slot="footer"
    class="border-t border-sky-200/70 pt-10 text-sm text-sky-700 dark:border-sky-800/60 dark:text-sky-300"
  >
    <License title={title} />
  </footer>
</Layout>
