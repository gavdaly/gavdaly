---
import { getCollection } from "astro:content";
import Layout from "@/layouts/MarkdownLayout.astro";
import formatDate from "@/utils/formatDate";
import type { CollectionEntry } from "astro:content";
import Tags from "@/components/Tags.astro";
import License from "@/components/CreativeCommons.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

type Props = {
  post: CollectionEntry<"posts">;
};

const post = Astro.props.post;
const data = post.data;
const { title, description, publishedAt, postState, tags } = data;
const { Content } = await post.render();
---

<Layout title={title} description={description} bodyClass="post-body">
  <header slot="header" class="flex flex-col gap-6 md:gap-8">
    <div class="flex flex-col gap-4">
      {postState && (
        <span
          class="w-fit rounded-full border border-sky-900/20 bg-sky-200/70 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-sky-900 dark:border-sky-100/10 dark:bg-sky-900/30 dark:text-sky-100"
        >
          {postState}
        </span>
      )}
      <h1
        class="text-4xl font-black leading-tight tracking-tight text-sky-950 dark:text-sky-100 md:text-5xl"
      >
        {title}
      </h1>
      <p class="max-w-2xl text-lg text-sky-800 dark:text-sky-200 md:text-xl">
        {description}
      </p>
    </div>
    <div class="flex flex-wrap items-center gap-4 text-sm font-semibold uppercase tracking-wide text-sky-700 dark:text-sky-300">
      <span class="text-xs font-medium text-sky-600 dark:text-sky-400">Published</span>
      <time datetime={publishedAt.toISOString()}>
        {formatDate(publishedAt)}
      </time>
    </div>
    <Tags names={tags} />
  </header>

  <Content />

  <footer
    slot="footer"
    class="border-t border-sky-200/70 pt-10 text-sm text-sky-700 dark:border-sky-800/60 dark:text-sky-300"
  >
    <License title={title} />
  </footer>
</Layout>

<head>
<script is:inline type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": `${title}`,
    "description": `${description}`,
    "author": {
      "@type": "Person",
      "name": "Gavin Daly"
    },
    "datePublished": `${publishedAt.toISOString()}`,
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": `${Astro.url}`
    }
  }
</script>

</head>

<style is:global>
  .markdown-body.post-body {
    @apply space-y-8 md:text-lg;
  }

  .markdown-body.post-body > :where(* + *) {
    @apply mt-10;
  }

  .markdown-body.post-body p {
    @apply leading-8;
  }

  .markdown-body.post-body strong {
    @apply font-semibold text-sky-950 dark:text-sky-100;
  }

  .markdown-body.post-body a {
    @apply font-semibold;
  }

  .markdown-body.post-body blockquote {
    @apply text-lg;
  }

  .markdown-body.post-body ul {
    @apply list-disc;
  }

  .markdown-body.post-body ol {
    @apply list-decimal;
  }

  .markdown-body.post-body h2 {
    @apply mt-16 text-3xl font-bold tracking-tight text-sky-950 dark:text-sky-100 md:text-4xl;
  }

  .markdown-body.post-body h3 {
    @apply mt-12 text-2xl font-semibold text-sky-900 dark:text-sky-100 md:text-3xl;
  }

  .markdown-body.post-body h4 {
    @apply mt-8 text-xl font-semibold text-sky-900 dark:text-sky-100;
  }

  .markdown-body.post-body h5 {
    @apply mt-6 text-lg font-semibold text-sky-900 dark:text-sky-100;
  }

  .markdown-body.post-body h6 {
    @apply mt-6 text-sm font-semibold uppercase tracking-wide text-sky-700 dark:text-sky-300;
  }
</style>
